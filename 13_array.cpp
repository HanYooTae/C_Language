// 13_array.cpp
#include<stdio.h>

#define ARR_SIZE 10

int get_2(void) { return 2; }

void Array();

int main()
{
	/*
		배열(Array)
		- 동일 자료형 변수의 집합
		- 배열에 속한 변수를 원소라고 부른다.
		- 인덱스[]를 사용하여 각 원소를 구분하며 항상 0부터 시작한다.
		- 배열의 원소는 연속된 메모리에 할당된다.
		- 많은 양의 데이터를 다룰때 사용한다.
	*/

	/*
		배열 선언 방법
		 - 자료형 배열명[#원소 개수] = #{ 초깃값, ... }
		 - 원소 개수는 양수인 정수형 상수만 사용 가능
		 - 원소 개수보다 초깃값이 적을 경우, 나머지 원소는 0으로 초기화
		 - 초깃값을 제공하는 경우, 원소 개수는 생략 가능
	*/


	int arr[3];					// int형 3개 선언, 모든 원소에 쓰레기 값이 들어있음
	int arr1[3] = {};			// 모든 원소가 0으로 초기화 {0,0,0}
	int arr2[5] = { 1,2,3 };	// 값을 정해준 원소 외의 값 0 {1, 2, 3, 0, 0}
	int arr3[ARR_SIZE];			// 매크로로 사이즈를 정해줄 수 있음
	int arr4[] = { 1,2,3 };		// 초기값이 3개이므로 배열의 크기는 3


	/*
		배열의 원소에 접근하기
			- 배열명[원소 번호]
			- 무조건 0번부터 시작한다.
			- 범위를 벗어나는 값으로 접근시 오류가 날 수 있다.
	*/
	char arr5[5] = { 'A', 'B', 'C' }; // 0 ~ 4 -> 0 1 2 3 4
	int test = 1;
	printf("%c, %c, %c\n", arr5[0], arr5[test], arr5[get_2()]);

	//int test2 = 7;
	//printf("%c \n", arr5[test2]);	// 범위를 벗어난 모르는 메모리를 읽어온다.
	//arr5[test2] = 'F';			// 범위를 벗어난 공간에 삽입 시도

	Array();

	return 0;
}

void Array()
{
	/*
		원소를 5개 가지는 정수형 배열을 생성한 뒤,
		각 원소가 '원소 번호'의 2배수를 저장하는 함수
	*/

	int arr[5];

	for (int i = 0; i < 5; i++) // 0 ~ 4
		arr[i] = i * 2;

	for (int i = 0; i < 5; i++)
		printf("%d, ", arr[i]);

	printf("\n");
}

/*
	과제
	1. 사이즈가 10인 int형 배열을 만들어 각 원소에 난수로 숫자를 넣어준다.
	2. 먼저 0번부터 순서대로 들어간 값을 출력해준다.
	3. 오름차순으로 정렬하여 출력해준다.
	4. 내림차순으로 정렬하여 출력해준다.

	오름차순 : 작은 수에서 큰 수로 정렬하는 것 1, 2, 3, ....
	내림차순 : 큰 수에서 작은 수로 정렬하는 것 10, 9, 8, ....
*/

